import { Sidebar } from '.'

export const HooksSidebar = () => {
  const DocsSidebarGroup = [
    {
      title: 'State',
      items: [
        { text: 'createGlobalState', href: '/hooks/state' },
        { text: 'createInjectionState', href: '/hooks/elements' },
        { text: 'createSharedComposable', href: '/hooks/browser' },
        { text: 'injectLocal', href: '/hooks/sensors' },
        { text: 'provideLocal', href: '/hooks/network' },
        { text: 'useAsyncState', href: '/hooks/animation' },
        {
          text: 'useDebouncedRefHistory',
          href: '/hooks/component',
        },
        { text: 'useLastChanged', href: '/hooks/watch' },
        { text: 'useLocalStorage', href: '/hooks/array' },
        { text: 'useManualRefHistory', href: '/hooks/time' },
        { text: 'useRefHistory', href: '/hooks/utilities' },
        { text: 'useSessionStorage', href: '/hooks/time' },
        { text: 'useStorage', href: '/hooks/utilities' },
        { text: 'useStorageAsync', href: '/hooks/time' },
        {
          text: 'useThrottledRefHistory',
          href: '/hooks/utilities',
        },
      ],
    },
    {
      title: 'Elements',
      items: [
        { text: 'useActiveElement', href: '/hooks/state' },
        { text: 'useDocumentVisibility', href: '/hooks/elements' },
        { text: 'useDraggable', href: '/hooks/browser' },
        { text: 'useDropZone', href: '/hooks/sensors' },
        { text: 'useElementBounding', href: '/hooks/network' },
        { text: 'useElementSize', href: '/hooks/animation' },
        { text: 'useElementVisibility', href: '/hooks/component' },
        { text: 'useIntersectionObserver', href: '/hooks/watch' },
        { text: 'useMouseInElement', href: '/hooks/array' },
        { text: 'useParentElement', href: '/hooks/time' },
        { text: 'useResizeObserver', href: '/hooks/utilities' },
        { text: 'useWindowFocus', href: '/hooks/elements/useWindowFocus' },
        { text: 'useWindowScroll', href: '/hooks/time' },
        { text: 'useWindowSize', href: '/hooks/utilities' },
      ],
    },
    {
      title: 'Browser',
      items: [
        { text: 'useBluetooth', href: '/hooks/state' },
        { text: 'useBreakpoins', href: '/hooks/elements' },
        { text: 'useBroadcastChannel', href: '/hooks/browser' },
        { text: 'useBrowserLocation', href: '/hooks/sensors' },
        { text: 'useClipboard', href: '/hooks/network' },
        { text: 'useClipboardItems', href: '/hooks/animation' },
        { text: 'useColorMode', href: '/hooks/component' },
        { text: 'useCssVar', href: '/hooks/watch' },
        { text: 'useDark', href: '/hooks/array' },
        { text: 'useEventListener', href: '/hooks/time' },
        { text: 'useEyedropper', href: '/hooks/utilities' },
        { text: 'useFavicon', href: '/hooks/sensors' },
        { text: 'useFileDialog', href: '/hooks/network' },
        { text: 'useFileSystemAccess', href: '/hooks/animation' },
        { text: 'useFullscreen', href: '/hooks/component' },
        { text: 'useGamepad', href: '/hooks/watch' },
        { text: 'useImage', href: '/hooks/array' },
        { text: 'useMediaControls', href: '/hooks/time' },
        { text: 'useMediaQuery', href: '/hooks/utilities' },
        { text: 'useMemory', href: '/hooks/sensors' },
        { text: 'useObjectUrl', href: '/hooks/network' },
        { text: 'usePerfomanceObserver', href: '/hooks/animation' },
        { text: 'usePermission', href: '/hooks/component' },
        { text: 'usePreferredColorScheme', href: '/hooks/watch' },
        { text: 'usePreferredContrast', href: '/hooks/array' },
        { text: 'usePreferredDark', href: '/hooks/time' },
        { text: 'usePreferredLanguages', href: '/hooks/utilities' },
        { text: 'usePreferredReducedMtion', href: '/hooks/utilities' },
        { text: 'useScreenOrientation', href: '/hooks/sensors' },
        { text: 'useScreenSafeArea', href: '/hooks/network' },
        { text: 'useScriptTag', href: '/hooks/animation' },
        { text: 'useShare', href: '/hooks/component' },
        { text: 'useStyleTag', href: '/hooks/watch' },
        { text: 'useTextareaAutosize', href: '/hooks/array' },
        { text: 'useTextDirection', href: '/hooks/time' },
        { text: 'useTitle', href: '/hooks/utilities' },
        { text: 'useUrlSearchParams', href: '/hooks/array' },
        { text: 'useVibrate', href: '/hooks/time' },
        { text: 'useWakeLock', href: '/hooks/utilities' },
        { text: 'useWebNotification', href: '/hooks/array' },
        { text: 'useWebWorker', href: '/hooks/time' },
        { text: 'useWebWorkerFn', href: '/hooks/utilities' },
      ],
    },
    {
      title: 'Sensors',
      items: [
        { text: 'onClickOutside', href: '/hooks/state' },
        { text: 'onKeyStroke', href: '/hooks/elements' },
        { text: 'onLongPress', href: '/hooks/browser' },
        { text: 'onStartTyping', href: '/hooks/sensors' },
        { text: 'useBattery', href: '/hooks/network' },
        { text: 'useDeviceMotion', href: '/hooks/animation' },
        { text: 'useDeviceOrientation', href: '/hooks/component' },
        { text: 'useDevicePixelRatio', href: '/hooks/watch' },
        { text: 'useDevicesList', href: '/hooks/array' },
        { text: 'useDisplayMedia', href: '/hooks/time' },
        { text: 'useElementByPoint', href: '/hooks/utilities' },
        { text: 'useElementHover', href: '/hooks/state' },
        { text: 'useFocus', href: '/hooks/elements' },
        { text: 'useFocusWithin', href: '/hooks/browser' },
        { text: 'useFps', href: '/hooks/sensors' },
        { text: 'useGeolocation', href: '/hooks/network' },
        { text: 'useIdle', href: '/hooks/animation' },
        { text: 'useInfiniteScroll', href: '/hooks/component' },
        { text: 'useKeyModifier', href: '/hooks/watch' },
        { text: 'useMagicKeys', href: '/hooks/array' },
        { text: 'useMouse', href: '/hooks/time' },
        { text: 'useMousePressed', href: '/hooks/utilities' },
        { text: 'useNavigatorLanguage', href: '/hooks/state' },
        { text: 'useNetwork', href: '/hooks/elements' },
        { text: 'useOnline', href: '/hooks/browser' },
        { text: 'usePageLeave', href: '/hooks/sensors' },
        { text: 'useParallax', href: '/hooks/network' },
        { text: 'usePointer', href: '/hooks/animation' },
        { text: 'usePointerLock', href: '/hooks/component' },
        { text: 'usePointerSwipe', href: '/hooks/watch' },
        { text: 'useScroll', href: '/hooks/array' },
        { text: 'useScrollLock', href: '/hooks/time' },
        { text: 'useSpeechRecognition', href: '/hooks/utilities' },
        { text: 'useSpeechSynthesis', href: '/hooks/array' },
        { text: 'useSwipe', href: '/hooks/time' },
        { text: 'useTextSelection', href: '/hooks/utilities' },
        { text: 'useUserMedia', href: '/hooks/utilities' },
      ],
    },
    {
      title: 'Network',
      items: [
        { text: 'useEventSource', href: '/hooks/state' },
        { text: 'useFetch', href: '/hooks/elements' },
        { text: 'useWebSocket', href: '/hooks/browser' },
      ],
    },
    {
      title: 'Animation',
      items: [
        { text: 'useAnimate', href: '/hooks/state' },
        { text: 'useInterval', href: '/hooks/elements' },
        { text: 'useIntervalFn', href: '/hooks/browser' },
        { text: 'useNow', href: '/hooks/sensors' },
        { text: 'useRafFn', href: '/hooks/network' },
        { text: 'useTimeout', href: '/hooks/animation' },
        { text: 'useTimeoutFn', href: '/hooks/component' },
        { text: 'useTimestamp', href: '/hooks/watch' },
        { text: 'useTransition', href: '/hooks/array' },
      ],
    },
    {
      title: 'Component',
      items: [
        { text: 'useCurrentElement', href: '/hooks/state' },
        { text: 'useEffectOnce', href: '/hooks/state' },
        { text: 'useFirstMountState', href: '/hooks/elements' },
        { text: 'useIsomorphicLayoutEffect', href: '/hooks/browser' },
        { text: 'useLogger', href: '/hooks/sensors' },
        { text: 'useMeasure', href: '/hooks/network' },
        { text: 'useRect', href: '/hooks/animation' },
        { text: 'useRenderInfo', href: '/hooks/component' },
        { text: 'useUnmount', href: '/hooks/watch' },
        { text: 'useVirtualList', href: '/hooks/time' },
        { text: 'useWillMount', href: '/hooks/array' },
      ],
    },
    {
      title: 'Date',
      items: [
        { text: 'useDateFormat', href: '/hooks/state' },
        { text: 'useTimeAgo', href: '/hooks/elements' },
      ],
    },
    {
      title: 'Watch',
      items: [
        { text: 'until', href: '/hooks/state' },
        { text: 'watchArray', href: '/hooks/elements' },
        { text: 'watchAtMost', href: '/hooks/browser' },
        { text: 'watchDebounced', href: '/hooks/sensors' },
        { text: 'watchDeep', href: '/hooks/network' },
        { text: 'watchIgnorable', href: '/hooks/animation' },
        { text: 'watchImmediate', href: '/hooks/component' },
        { text: 'watchOnce', href: '/hooks/watch' },
        { text: 'watchPausable', href: '/hooks/array' },
        { text: 'watchhThrottled', href: '/hooks/time' },
        { text: 'watchTriggerable', href: '/hooks/utilities' },
        { text: 'watchWithFilter', href: '/hooks/utilities' },
        { text: 'whenever', href: '/hooks/utilities' },
      ],
    },
    {
      title: 'Array',
      items: [
        { text: 'useArrayDifference', href: '/hooks/state' },
        { text: 'useArrayEvery', href: '/hooks/elements' },
        { text: 'useArrayFilter', href: '/hooks/browser' },
        { text: 'useArrayFind', href: '/hooks/sensors' },
        { text: 'useArrayFindIndex', href: '/hooks/network' },
        { text: 'useArrayFindLast', href: '/hooks/animation' },
        { text: 'useArrayIncludes', href: '/hooks/component' },
        { text: 'useArrayJoin', href: '/hooks/watch' },
        { text: 'useArrayMap', href: '/hooks/array' },
        { text: 'useArrayReduce', href: '/hooks/time' },
        { text: 'useArraySome', href: '/hooks/utilities' },
        { text: 'useArrayUnique', href: '/hooks/utilities' },
        { text: 'useList', href: '/hooks/utilities' },
        { text: 'useSorted', href: '/hooks/utilities' },
      ],
    },
  ]
  return (
    <>
      <Sidebar groups={DocsSidebarGroup} />
    </>
  )
}
